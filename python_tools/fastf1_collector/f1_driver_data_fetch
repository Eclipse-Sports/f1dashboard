##External imports
import numpy as np
import fastf1
import pandas as pd
import fastf1.api



#Internal Imports
import os
import re
from datetime import date
import requests
import datetime

#Enable the F1 local cache connection
fastf1.Cache.enable_cache('./FastF1Cache')

#Fetching the driver information
list_of_schedules = os.listdir("../../csv_data/schedule_data")
drivers = pd.DataFrame()    
year_problem = []
#print(pd.read_csv("../../csv_data/schedule_data/{}".format(list_of_schedules[0])))
#Get the initial name information to start the dictionary relationship

def setup():
    try:
        os.chdir("../..")
        if not(os.path.isdir('csv_data')):
            os.makedirs('csv_data', exist_ok = True)
        os.chdir("./csv_data")
        if not(os.path.isdir('driver_data')):
            os.makedirs('driver_data', exist_ok = True)
        os.chdir("../python_tools/fastf1_collector")
        print("Setup Complete - Success!")
        return True
    except:
        print("Setup Failed - Failure!")
        return False


def get_yearly_driver_data(drivers, year):
    count_2 = 0
    #Get the driver data for the year
    df = pd.read_csv("../../csv_data/schedule_data/f1_{}.csv".format(year))
    for race in df.index:
        curr_race = df.loc[race]
        session = fastf1.get_session(year, curr_race["RoundNumber"], 'R')
        try:
            sprint = fastf1.get_session(year, curr_race["RoundNumber"], 'S')
            sprint.load(laps= False, weather = False)
        except:
            sprint = None
        try:
            session.load(laps = False, weather = False)
        except:
            count_2 = count_2 + 1
            year_problem.append([curr_race['Location'], year])
            continue
        if year == 2020 and curr_race["RoundNumber"] == 2:
            results.sort_values(['FullName'])
        else:
            results = session.results.reset_index(drop = True)
        #manual fix for styrian GP
        results['Year'] = results.shape[0] * [year]
        results["Race"] = curr_race["Location"]
        results['Date'] = session.date
        if sprint != None:
            sprint_race = sprint.results.reset_index(drop = True)
            sprint_race['Year'] = sprint_race.shape[0] * [year]
            sprint_race["Race"] = curr_race["Location"]
            sprint_race["Date"] = sprint.date
            print(sprint)
            drivers = pd.concat([drivers, sprint_race])
        drivers = pd.concat([drivers, results])
        print(drivers)
    return count_2, drivers

def get_all_data():
    drivers = pd.DataFrame()
    count = 0
    for year in range(1950, datetime.date.today().year + 1):
        count_2, drivers = get_yearly_driver_data(drivers, year)
        count = count + count_2
        print(drivers)
    return count, drivers


def group_driver_data(full_data):
    #Group the driver data by driver name
    driver_names = full_data['FullName'].unique()
    for name in driver_names:
        curr_data = full_data.loc[full_data['FullName'] == name]
        curr_data = curr_data.reset_index(drop = True)
        curr_data.to_csv("../../csv_data/driver_data/{}_data.csv".format(name.lower().replace(" ", "_")))
    print("All Files Saved - Success!")


#Lines for saving the initial data
setup()
full_data = get_all_data()[1]
full_data.to_csv("../../csv_data/driver_data/f1_driver_data.csv")
full_data = pd.read_csv("../../csv_data/driver_data/f1_driver_data.csv")
group_driver_data(full_data)

